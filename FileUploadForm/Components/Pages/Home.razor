@page "/"
@rendermode InteractiveServer

@using FileUploadForm.Abstractions
@using FileUploadForm.Models
@using System.ComponentModel.DataAnnotations

@inject IBlobStorageService BlobStorageService

<PageTitle>File Upload</PageTitle>

<EditForm id="form_container" class="flex-column" EditContext="@editContext" OnSubmit="UploadFile">

    <DataAnnotationsValidator />

    <div class="input_container flex-column" >
        <span class="label">Select Document:</span>
        <InputFile id="client_file" OnChange="OnSelectedFile" />
    </div>
    <div class="input_container flex-column">
        <span class="label">Email: </span>
        <InputText id="client_email" @bind-Value="formModel.Email" />
    </div>
    <button id ="bt_submit" type="submit">Submit</button>
        @if(isLoading)
        {
            <span id="loading_status"><i>Loading...</i></span>
        }
        @if(!String.IsNullOrEmpty(response?.Status))
        {
            @if(response.Error == true)
            {
                <span id="error" class="response_status">@response.Status</span>
            }
            else
            {
                <span id="success" class="response_status">@response.Status</span>
            }
        }
    <ValidationSummary />

</EditForm>

@code 
{
    EditContext? editContext;
    FormModel formModel = new();

    ResponseDTO? response;

    bool isLoading;

    protected override void OnInitialized()
    {
        editContext = new(formModel);
    }

    private void OnSelectedFile(InputFileChangeEventArgs e)
    {
        formModel.File = e.File;
        formModel.Name = e.File.Name;
    }

    private async Task UploadFile()
    {
        isLoading = true;
        if (editContext != null && editContext.Validate())
            response = await BlobStorageService.Upload(formModel.File, formModel.Email);

        isLoading = false;
    }
}